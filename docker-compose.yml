version: '3.8'

services:
  # Main Next.js Application
  hash2k25-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: hash2k25-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - DIRECT_URL=${DIRECT_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - FROM_EMAIL=${FROM_EMAIL}
      - ADMIN_EMAILS=${ADMIN_EMAILS}
      - APP_NAME=${APP_NAME}
      - APP_URL=${APP_URL}
    env_file:
      - .env
    volumes:
      - ./prisma:/app/prisma:ro
    networks:
      - hash2k25-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - postgres

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hash2k25-postgres
    environment:
      POSTGRES_DB: hash2k25
      POSTGRES_USER: ${DB_USER:-hash2k25}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-hash2k25password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5433:5432"
    networks:
      - hash2k25-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-hash2k25}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: hash2k25-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - hash2k25-network
    restart: unless-stopped
    depends_on:
      - hash2k25-app

  # Redis for Session Storage (Optional)
  redis:
    image: redis:7-alpine
    container_name: hash2k25-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - hash2k25-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  hash2k25-network:
    driver: bridge
