// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Used for migrations and local development
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  role          String    @default("USER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  // Team relationships
  leadingTeam  Team?    @relation("TeamLeader")
  memberOfTeam Team?    @relation("TeamMember", fields: [teamId], references: [id])
  teamId       String?

  // Added by relationship (for team members)
  addedBy   User?   @relation("AddedByUser", fields: [addedById], references: [id])
  addedById String?
  addedUsers User[] @relation("AddedByUser")

  // Project idea relationships
  submittedIdeas ProjectIdea[] @relation("SubmittedBy")
  updatedIdeas   ProjectIdea[] @relation("UpdatedBy")

  @@index([email])
}

model Team {
  id             String   @id @default(cuid())
  name           String
  collegeName    String
  university     String
  address        String
  state          String
  numberOfMembers Int      @default(1)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Leader relationship
  leader   User   @relation("TeamLeader", fields: [leaderId], references: [id])
  leaderId String @unique

  // Members relationship
  members User[] @relation("TeamMember")

  // Project idea relationship
  projectIdea ProjectIdea?
}

model ProjectIdea {
  id              String   @id @default(cuid())
  title           String
  description     String   @db.Text
  techStack       String   @db.Text
  problemStatement String   @db.Text
  solution        String   @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Team relationship
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String @unique

  // User relationships
  submittedBy   User   @relation("SubmittedBy", fields: [submittedById], references: [id])
  submittedById String

  updatedBy   User?   @relation("UpdatedBy", fields: [updatedById], references: [id])
  updatedById String?
}

model TeamMember {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  teamId    String
  createdAt DateTime @default(now())
  
  @@map("team_members")
}

model AdminEmail {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  
  @@map("admin_emails")
}
