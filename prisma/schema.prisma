generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  phone          String?
  role           String        @default("USER")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  teamId         String?
  addedById      String?
  accounts       Account[]
  submittedIdeas ProjectIdea[] @relation("SubmittedBy")
  updatedIdeas   ProjectIdea[] @relation("UpdatedBy")
  sessions       Session[]
  leadingTeam    Team?         @relation("TeamLeader")
  addedBy        User?         @relation("AddedByUser", fields: [addedById], references: [id])
  addedUsers     User[]        @relation("AddedByUser")
  memberOfTeam   Team?         @relation("TeamMember", fields: [teamId], references: [id])

  @@index([email])
}

model Team {
  id              String       @id @default(cuid())
  name            String
  collegeName     String
  university      String
  address         String
  state           String
  numberOfMembers Int          @default(1)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  leaderId        String       @unique
  projectIdea     ProjectIdea?
  leader          User         @relation("TeamLeader", fields: [leaderId], references: [id])
  members         User[]       @relation("TeamMember")
}

model ProjectIdea {
  id               String        @id @default(cuid())
  title            String
  description      String
  techStack        String
  problemStatement String
  solution         String
  status           ProjectStatus @default(PENDING)
  isDraft          Boolean       @default(true)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  teamId           String        @unique
  submittedById    String
  updatedById      String?
  submittedBy      User          @relation("SubmittedBy", fields: [submittedById], references: [id])
  team             Team          @relation(fields: [teamId], references: [id])
  updatedBy        User?         @relation("UpdatedBy", fields: [updatedById], references: [id])
}

model TeamMember {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  teamId    String
  createdAt DateTime @default(now())

  @@map("team_members")
}

model AdminEmail {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())

  @@map("admin_emails")
}

model Deadline {
  id          String   @id @default(cuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("deadlines")
}

enum ProjectStatus {
  PENDING
  ACCEPTED
  REJECTED
  WAITLIST
}
